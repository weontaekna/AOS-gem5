arch/alpha/isa/mem.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/alpha/isa/mem.isa:    Fault %(class_name)s::initiateAcc(ExecContext *xc,
arch/alpha/isa/mem.isa:    Fault %(class_name)s::initiateAcc(ExecContext *xc,
arch/alpha/isa/mem.isa:    Fault %(class_name)s::initiateAcc(ExecContext *xc,
arch/alpha/isa/mem.isa:        warn("initiateAcc undefined: Misc instruction does not support split "
arch/alpha/isa/mem.isa:    initiateAccTemplate = eval(exec_template_base + 'InitiateAcc')
arch/alpha/isa/mem.isa:            + initiateAccTemplate.subst(iop)
arch/arm/isa/insts/mem.isa:            self.initiateAccTemplate = eval(self.execBase + 'InitiateAcc')
arch/arm/isa/insts/mem.isa:                          self.initiateAccTemplate.subst(iop) + \
arch/arm/isa/templates/branch.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/macromem.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/macromem.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/macromem.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/macromem.isa:    Fault %(class_name)s<%(targs)s>::initiateAcc(
arch/arm/isa/templates/mem.isa:    Fault %(class_name)s::initiateAcc(ExecContext *xc,
arch/arm/isa/templates/mem.isa:    Fault %(class_name)s::initiateAcc(ExecContext *xc,
arch/arm/isa/templates/mem.isa:    Fault %(class_name)s::initiateAcc(ExecContext *xc,
arch/arm/isa/templates/mem.isa:    Fault %(class_name)s::initiateAcc(ExecContext *xc,
arch/arm/isa/templates/mem.isa:    Fault %(class_name)s<Element>::initiateAcc(
arch/arm/isa/templates/mem.isa:    Fault %(class_name)s::initiateAcc(ExecContext *xc,
arch/arm/isa/templates/mem.isa:    Fault %(class_name)s<Element>::initiateAcc(
arch/arm/isa/templates/mem.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/mem.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/mem.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/mem.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/mem.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/mem.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/mem.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/mem.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/mem.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/mem.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/mem.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/mem.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/mem64.isa:    Fault %(class_name)s::initiateAcc(ExecContext *xc,
arch/arm/isa/templates/mem64.isa:    Fault %(class_name)s::initiateAcc(ExecContext *xc,
arch/arm/isa/templates/mem64.isa:    Fault %(class_name)s::initiateAcc(ExecContext *xc,
arch/arm/isa/templates/mem64.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/mem64.isa:    Fault %(class_name)s::initiateAcc(ExecContext *xc,
arch/arm/isa/templates/mem64.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/mem64.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/mem64.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/mem64.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/mem64.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/mem64.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/mem64.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/mem64.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/mem64.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/mem64.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/misc.isa:      Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/misc.isa:    Fault %(class_name)s::initiateAcc(ExecContext *xc,
arch/arm/isa/templates/neon64.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/arm/isa/templates/neon64.isa:    Fault %(class_name)s::initiateAcc(
arch/arm/isa/templates/neon64.isa:    Fault %(class_name)s::initiateAcc(
arch/hsail/insts/decl.hh:        initiateAcc(GPUDynInstPtr gpuDynInst)
arch/hsail/insts/mem.hh:        initiateAcc(GPUDynInstPtr gpuDynInst) override
arch/hsail/insts/mem.hh:        initiateAcc(GPUDynInstPtr gpuDynInst) override
arch/hsail/insts/mem.hh:        initiateAcc(GPUDynInstPtr gpuDynInst) override
arch/mips/isa/formats/mem.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/mips/isa/formats/mem.isa:    Fault %(class_name)s::initiateAcc(ExecContext *xc,
arch/mips/isa/formats/mem.isa:    Fault %(class_name)s::initiateAcc(ExecContext *xc,
arch/mips/isa/formats/mem.isa:    Fault %(class_name)s::initiateAcc(ExecContext *xc,
arch/mips/isa/formats/util.isa:    initiateAccTemplate = eval(exec_template_base + 'InitiateAcc')
arch/mips/isa/formats/util.isa:            + initiateAccTemplate.subst(iop)
arch/power/isa/formats/mem.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/power/isa/formats/mem.isa:    Fault %(class_name)s::initiateAcc(ExecContext *xc,
arch/power/isa/formats/mem.isa:    Fault %(class_name)s::initiateAcc(ExecContext *xc,
arch/power/isa/formats/util.isa:    initiateAccTemplate = eval(exec_template_base + 'InitiateAcc')
arch/power/isa/formats/util.isa:            + initiateAccTemplate.subst(iop)
arch/riscv/insts/static_inst.hh:    initiateAcc(ExecContext *xc, Trace::InstRecord *traceData) const override
arch/riscv/isa/formats/amo.isa:            Fault initiateAcc(ExecContext *,
arch/riscv/isa/formats/amo.isa:            Fault initiateAcc(ExecContext *,
arch/riscv/isa/formats/amo.isa:// initiateAcc() templates
arch/riscv/isa/formats/amo.isa:    %(class_name)s::%(class_name)sMicro::initiateAcc(ExecContext *xc,
arch/riscv/isa/formats/amo.isa:    %(class_name)s::%(class_name)sMicro::initiateAcc(ExecContext *xc,
arch/riscv/isa/formats/amo.isa:    %(class_name)s::%(class_name)sRMW::initiateAcc(ExecContext *xc,
arch/riscv/isa/formats/mem.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
arch/riscv/isa/formats/mem.isa:    initiateAccTemplate = eval(exec_template_base + 'InitiateAcc')
arch/riscv/isa/formats/mem.isa:        initiateAccTemplate.subst(iop) +
arch/riscv/isa/formats/mem.isa:    %(class_name)s::initiateAcc(ExecContext *xc,
arch/riscv/isa/formats/mem.isa:    %(class_name)s::initiateAcc(ExecContext *xc,
arch/sparc/insts/micro.hh:    initiateAcc(ExecContext *, Trace::InstRecord *) const override
arch/sparc/isa/formats/mem/basicmem.isa:            Fault initiateAcc(ExecContext *,
arch/sparc/isa/formats/mem/blockmem.isa:                Fault initiateAcc(ExecContext *,
arch/sparc/isa/formats/mem/blockmem.isa:                Fault initiateAcc(ExecContext *,
arch/sparc/isa/formats/mem/blockmem.isa:                Fault initiateAcc(ExecContext *,
arch/sparc/isa/formats/mem/blockmem.isa:                Fault initiateAcc(ExecContext *,
arch/sparc/isa/formats/mem/blockmem.isa:                Fault initiateAcc(ExecContext *,
arch/sparc/isa/formats/mem/blockmem.isa:                Fault initiateAcc(ExecContext *,
arch/sparc/isa/formats/mem/blockmem.isa:                Fault initiateAcc(ExecContext *,
arch/sparc/isa/formats/mem/blockmem.isa:                Fault initiateAcc(ExecContext *,
arch/sparc/isa/formats/mem/swap.isa:        Fault %(class_name)s::initiateAcc(ExecContext * xc,
arch/sparc/isa/formats/mem/util.isa:        Fault %(class_name)s::initiateAcc(ExecContext * xc,
arch/sparc/isa/formats/mem/util.isa:        Fault %(class_name)s::initiateAcc(ExecContext * xc,
arch/x86/isa/formats/monitor_mwait.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const;
arch/x86/isa/formats/monitor_mwait.isa:    Fault %(class_name)s::initiateAcc(ExecContext * xc,
arch/x86/isa/microops/ldstop.isa:    Fault %(class_name)s::initiateAcc(ExecContext * xc,
arch/x86/isa/microops/ldstop.isa:    Fault %(class_name)s::initiateAcc(ExecContext * xc,
arch/x86/isa/microops/ldstop.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const;
arch/x86/isa/microops/ldstop.isa:        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const;
cpu/minor/dyn_inst.hh:     *  initiateAcc for memory ops) */
cpu/minor/execute.cc:        Fault init_fault = inst->staticInst->initiateAcc(&context,
cpu/minor/execute.cc:                " initiateAcc: %s\n", *inst, init_fault->name());
cpu/minor/execute.cc:                             *  depends on so that initiateAcc can be called
cpu/minor/execute.hh:    /** Execute a memory reference instruction.  This calls initiateAcc on
cpu/minor/scoreboard.hh:     *  can call initiateAcc */
cpu/o3/dyn_inst.hh:    Fault initiateAcc();
cpu/o3/dyn_inst_impl.hh:BaseO3DynInst<Impl>::initiateAcc()
cpu/o3/dyn_inst_impl.hh:    this->fault = this->staticInst->initiateAcc(this, this->traceData);
cpu/o3/lsq.hh:     * from initiateAcc to resource deallocation at commit or squash.
cpu/o3/lsq_unit_impl.hh:    load_fault = inst->initiateAcc();
cpu/o3/lsq_unit_impl.hh:    Fault store_fault = store_inst->initiateAcc();
cpu/simple/timing.cc:        Fault fault = curStaticInst->initiateAcc(&t_info, traceData);
cpu/static_inst.hh:    virtual Fault initiateAcc(ExecContext *xc,
cpu/static_inst.hh:        panic("initiateAcc not defined!");
doc/inside-minor.doxygen:EA calculations.  On 'commit', the ExecContext::initiateAcc execution phase is
gpu-compute/global_memory_pipeline.cc:        mp->initiateAcc(mp);
gpu-compute/gpu_dyn_inst.cc:GPUDynInst::initiateAcc(GPUDynInstPtr gpuDynInst)
gpu-compute/gpu_dyn_inst.cc:    _staticInst->initiateAcc(gpuDynInst);
gpu-compute/gpu_dyn_inst.hh:    void initiateAcc(GPUDynInstPtr gpuDynInst);
gpu-compute/gpu_static_inst.hh:    initiateAcc(GPUDynInstPtr gpuDynInst)
gpu-compute/gpu_static_inst.hh:        fatal("calling initiateAcc() on a non-memory instruction.\n");
gpu-compute/lds_state.cc:        gpuDynInst->initiateAcc(gpuDynInst);
tags:BaseO3DynInst::initiateAcc	cpu/o3/dyn_inst.hh	/^    Fault initiateAcc();$/;"	p	class:BaseO3DynInst	access:public	signature:()
tags:BaseO3DynInst::initiateAcc	cpu/o3/dyn_inst_impl.hh	/^BaseO3DynInst<Impl>::initiateAcc()$/;"	f	class:BaseO3DynInst	signature:()
tags:GPUDynInst::initiateAcc	gpu-compute/gpu_dyn_inst.cc	/^GPUDynInst::initiateAcc(GPUDynInstPtr gpuDynInst)$/;"	f	class:GPUDynInst	signature:(GPUDynInstPtr gpuDynInst)
tags:GPUDynInst::initiateAcc	gpu-compute/gpu_dyn_inst.hh	/^    void initiateAcc(GPUDynInstPtr gpuDynInst);$/;"	p	class:GPUDynInst	access:public	signature:(GPUDynInstPtr gpuDynInst)
tags:GPUStaticInst::initiateAcc	gpu-compute/gpu_static_inst.hh	/^    initiateAcc(GPUDynInstPtr gpuDynInst)$/;"	f	class:GPUStaticInst	access:public	signature:(GPUDynInstPtr gpuDynInst)
tags:HsailISA::MemFence::initiateAcc	arch/hsail/insts/decl.hh	/^        initiateAcc(GPUDynInstPtr gpuDynInst)$/;"	f	class:HsailISA::MemFence	access:public	signature:(GPUDynInstPtr gpuDynInst)
tags:StaticInst::initiateAcc	cpu/static_inst.hh	/^    virtual Fault initiateAcc(ExecContext *xc,$/;"	f	class:StaticInst	access:public	signature:(ExecContext *xc, Trace::InstRecord *traceData) const
tags:initiateAcc	arch/hsail/insts/decl.hh	/^        initiateAcc(GPUDynInstPtr gpuDynInst)$/;"	f	class:HsailISA::MemFence	access:public	signature:(GPUDynInstPtr gpuDynInst)
tags:initiateAcc	cpu/o3/dyn_inst.hh	/^    Fault initiateAcc();$/;"	p	class:BaseO3DynInst	access:public	signature:()
tags:initiateAcc	cpu/o3/dyn_inst_impl.hh	/^BaseO3DynInst<Impl>::initiateAcc()$/;"	f	class:BaseO3DynInst	signature:()
tags:initiateAcc	cpu/static_inst.hh	/^    virtual Fault initiateAcc(ExecContext *xc,$/;"	f	class:StaticInst	access:public	signature:(ExecContext *xc, Trace::InstRecord *traceData) const
tags:initiateAcc	gpu-compute/gpu_dyn_inst.cc	/^GPUDynInst::initiateAcc(GPUDynInstPtr gpuDynInst)$/;"	f	class:GPUDynInst	signature:(GPUDynInstPtr gpuDynInst)
tags:initiateAcc	gpu-compute/gpu_dyn_inst.hh	/^    void initiateAcc(GPUDynInstPtr gpuDynInst);$/;"	p	class:GPUDynInst	access:public	signature:(GPUDynInstPtr gpuDynInst)
tags:initiateAcc	gpu-compute/gpu_static_inst.hh	/^    initiateAcc(GPUDynInstPtr gpuDynInst)$/;"	f	class:GPUStaticInst	access:public	signature:(GPUDynInstPtr gpuDynInst)
